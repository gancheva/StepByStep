//
//  TutorialViewController.m
//  StepByStep
//
//  Created by iTract02 on 10/15/13.
//  Copyright (c) 2013 iTract. All rights reserved.
//

#import "TutorialViewController.h"
#import "NavigationTemplateViewController.h"

@interface TutorialViewController ()
@property (strong, nonatomic) IBOutlet UIScrollView *scrollView;
@property (strong, nonatomic) IBOutlet UIPageControl *pageControl;
@property (strong, nonatomic) IBOutlet UILabel *infoLabel;
@property (strong, nonatomic) IBOutlet UIButton *forwardButton;
@property (strong, nonatomic) IBOutlet UIButton *backwardButton;
@property NSArray *pageViews;
@property NSMutableArray *scrollingPageViews;

@end

@implementation TutorialViewController
@synthesize tutorialInfo;
@synthesize infoLabel;
@synthesize scrollView;
@synthesize pageControl;
@synthesize pageViews;
@synthesize scrollingPageViews;
@synthesize startPageIndex;
@synthesize forwardButton;
@synthesize backwardButton;

NavigationTemplateViewController *ntvc;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self setupSlider];
    ntvc = (NavigationTemplateViewController *)self.parentViewController;
    [self updateTitle];
	// Do any additional setup after loading the view.
}

-(void)viewWillAppear:(BOOL)animated {
    [self scrollToClickedPage];
}

-(void)setupSlider {
    [self.scrollView setDelegate:self];
    
    NSMutableArray *views = [NSMutableArray array];
    for (NSInteger i = 0; i < [tutorialInfo.views count]; i++) {
        UIViewController * viewController = [tutorialInfo.views objectAtIndex:i];
        [self addChildViewController:viewController];
        [views addObject:viewController.view];
    }
    
    self.pageViews = [NSArray arrayWithArray:views];
    NSInteger pageCount = self.pageViews.count;
    
    self.pageControl.currentPage = 0;
    self.pageControl.numberOfPages = pageCount;
    
    self.scrollingPageViews = [[NSMutableArray alloc] init];
    for(NSInteger i = 0; i <pageCount; ++i) {
        [self.scrollingPageViews addObject:[NSNull null]];
    }
    
}

-(void)loadPage:(NSInteger)page {
    if(page < 0 || page >= self.pageViews.count) {
        return;
    }
    
    UIView *pageView = [self.scrollingPageViews objectAtIndex:page];
    if((NSNull *)pageView == [NSNull null]) {
        CGRect frame = self.scrollView.bounds;
        frame.origin.x = frame.size.width * page;
        frame.origin.y = 0.0f;
        
        UIView *newPageView = [self.pageViews objectAtIndex:page];
        newPageView.contentMode = UIViewContentModeScaleAspectFill;
        newPageView.frame = frame;
        [self.scrollView addSubview:newPageView];
        
        [self.scrollingPageViews replaceObjectAtIndex:page withObject:newPageView];
    }
}

-(void)purgePage:(NSInteger)page {
    if(page < 0 || page >= self.pageViews.count) {
        return;
    }
    
    UIView *pageView = [self.scrollingPageViews objectAtIndex:page];
    if((NSNull *)pageView != [NSNull null]) {
        [pageView removeFromSuperview];
        [self.scrollingPageViews replaceObjectAtIndex:page withObject:[NSNull null]];
    }
}

-(void)loadVisiblePages {
    CGFloat pageWidth = self.scrollView.frame.size.width;
    NSInteger page = (NSInteger)floor((self.scrollView.contentOffset.x * 2.0f + pageWidth) / (pageWidth * 2.0f));
    self.pageControl.currentPage = page;
    NSInteger firstPage = page - 1;
    NSInteger lastPage = page + 1;
    
    for(NSInteger i = 0; i < firstPage; i++) {
        [self purgePage:i];
    }
    
    for(NSInteger i = firstPage; i <=lastPage; i++) {
        [self loadPage:i];
    }
    
    for(NSInteger i = lastPage+1; i < self.pageViews.count; i++) {
        [self purgePage:i];
    }
}

-(void)scrollViewDidScroll:(UIScrollView *)scrollView {
    [self loadVisiblePages];
    [self updateTitle];
}

- (IBAction)backPressed:(UIButton *)sender {
    if(pageControl.currentPage > 0) {
        [self previousView];
    }
}

- (IBAction)forwardPressed:(UIButton *)sender {
    if(pageControl.currentPage < ([tutorialInfo.titles count] - 1)) {
        [self nextView];
    }
}	

-(void)nextView {
    NSInteger currentPage = self.pageControl.currentPage;
    NSInteger nextPage = currentPage + 1;
    
    CGRect frame = self.scrollView.bounds;
    NSInteger pageWidth = frame.size.width * nextPage;
    [self.scrollView setContentOffset:CGPointMake(pageWidth, 0) animated:YES];
}

-(void)previousView {
    NSInteger currentPage = self.pageControl.currentPage;
    NSInteger previousPage = currentPage - 1;
    
    CGRect frame = self.scrollView.bounds;
    NSInteger pageWidth = frame.size.width * previousPage;
    [self.scrollView setContentOffset:CGPointMake(pageWidth, 0) animated:YES];
}

-(void)scrollToClickedPage {
    CGRect frame = self.scrollView.bounds;
    NSInteger pageWidth = frame.size.width * startPageIndex;
    [self.scrollView setContentOffset:CGPointMake(pageWidth, 0) animated:NO];
}

-(void)updateTitle {
    self.title = [tutorialInfo.titles objectAtIndex:pageControl.currentPage];
    [ntvc refreshTitle];
    infoLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Page %d of %lu", nil), (pageControl.currentPage + 1), (unsigned long)[tutorialInfo.titles count]];
    [self updateNavigation];
}

-(void)updateNavigation {
    if(pageControl.currentPage == 0) {
        [forwardButton setHidden:NO];
        [backwardButton setHidden:YES];
    }
    else if(pageControl.currentPage == ([tutorialInfo.views count] - 1)) {
        [forwardButton setHidden:YES];
        [backwardButton setHidden:NO];
    }
    else {
        [forwardButton setHidden:NO];
        [backwardButton setHidden:NO];
    }
}

-(void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    
    CGSize pageScrollViewSize = self.scrollView.frame.size;
    self.scrollView.contentSize = CGSizeMake(pageScrollViewSize.width * self.pageViews.count, pageScrollViewSize.height);
    
    [self loadVisiblePages];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
